#!/bin/sh

TMPFILE=$(mktemp /tmp/gitodo.XXXXXX)
TMPSEARCH=$(mktemp /tmp/gitodo_search.XXXXXX)
trap 'rm -f $TMPFILE' EXIT
trap 'rm -f $TMPSEARCH' EXIT

function error()
{
	echo "Error: $1"
	exit
}

function success()
{
	echo $1
	echo "${commit_message}$1" >> ${TMPFILE}
}

function create_file()
{
	echo "# $1" >> "$filename"
	success "File $1.md created"
}

function create_sublist()
{
    echo "

### $1" >> $2.md
		success "Added sublist $1 in list $2"
}

function remove()
{
    confirm_file_exists

    if todo_exists "- [ ] ${a[2]}"; then
        echo "${content/"- [ ] ${a[2]}"/}" > "$filename"
        success "${a[2]} successfully removed"
    else
        error "Todo '${a[2]}' does not exist"
    fi

}

function find_flag_index()
{
	for i in "${!a[@]}" ; do
		if [ "${a[$i]}" = $1 ]; then
			idx=$(($i+1))
			flag_value="${a[$idx]}"
		fi
	done
}

function flag_exists()
{
	for i in "${!a[@]}" ; do
		if [ "${a[$i]}" = $1 ]; then
		    find_flag_index $1
			return 0
		fi
	done
	return 1
}

function create_sublist_from_flag()
{
	if flag_exists "-s"; then
		find_flag_index "-s"
		if [ -z "${a[$idx]}" ]; then
			if ! sublist_exists "General"; then
        		create_sublist "General" $1
        	fi
		else
			if ! sublist_exists "${a[$idx]}"; then
				create_sublist "${a[$idx]}" $1
			fi
		fi
	fi
}

function create()
{
	if [ -z ${a[1]} ]; then
		error "File name must be specified"
	elif file_exists; then
		error "Requested File already exists."
	fi
	confirm_file_is_in_gitdir
	create_file ${a[1]}
}

function todo_exists()
{
	if [[ "$content" == *"$1"* ]]; then
		return 0
	else
		return 1
	fi
}

function add_todo()
{
	if todo_exists "$1"; then
		if flag_exists "-f" || flag_exists "--force"; then
			write_todo "$1" "$2"
		elif todo_is_complete "${a[2]}"; then
			error "Todo already exists and is already complete. To add it anyway, add the -f Flag"
		else
			error "Todo already exists. To add it anyway, add the -f Flag"
		fi
	else
		write_todo "$1" "$2"
	fi
}

function write_todo()
{
    if flag_exists "-l"; then
        find_flag_index "-l"
        if [ -z "$flag_value" ]; then
             todo_content="
- [ ] $1  "
        else
            todo_content="
- [ ] [$1]($flag_value)  "
        fi
    else
        todo_content="
- [ ] $1  "
    fi

    if flag_exists "-s"; then
        content=$(< $filename )
        echo "${content/"### $flag_value"/### $flag_value $todo_content}" > "$filename"
    else
        echo "$todo_content" > "$filename"
    fi
    success "Todo $1 successfully added"

}

function todo()
{
	if [ -z $filename ] || [ -z "${a[2]}" ]; then
		error "Filename and todo must be specified"
	elif [ file_exists ]; then
		create_sublist_from_flag $filename
		add_todo "${a[2]}" $filename
	else
		if flag_exists "-f" || flag_exists "--force"; then
			create
			create_sublist_from_flag $filename
			add_todo "${a[2]}" $filename
		else
			error "File does not exist. To force file creation, add the -f flag"
		fi
	fi
}

function todo_is_complete()
{
	if [[ $content == *"[x] $1"* ]]; then
		return 0
	else
		return 1
	fi
}

function complete()
{
  confirm_file_exists
	if todo_exists "${a[2]}"; then
		if todo_is_complete "${a[2]}"; then
			error "Todo is already complete"
		else
			echo "${content/"- [ ] ${a[2]}"/- [x] ${a[2]} }" > "${a[1]}.md"
			success "${a[2]} marked as complete"
		fi
	else
		error "Todo ${a[2]} does not exist"
	fi
}

function sublist_exists()
{
	if [[ $content == *"### $1"* ]]; then
		return 0
	else
		return 1
	fi
}

function sublist()
{
	if [ -z ${a[1]} ] || [ -z "${a[2]}" ]; then
		error "Filename and sublist must be specified"
	elif [ -a "$filename" ]; then
		if sublist_exists ${a[2]}; then
			if flag_exists "-f" || flag_exists "--force"; then
				create_sublist "${a[2]}" ${a[1]}
			else
	    		error "Sublist ${a[2]} already exists. If you would like to add it anyway, add the -f flag"
			fi
		else
			create_sublist "${a[2]}" ${a[1]}
		fi
	else
		if flag_exists "-f" || flag_exists "--force"; then
			create
			create_sublist "${a[2]}" ${a[1]}
		else
			error "File does not exist. To force file creation, add the -f Flag"
		fi
	fi
}

function should_be_shown()
{
	if flag_exists "--done"; then
		if [[ $1 == *"- [x]"* ]] || line_is_sublist "$1"; then
			return 0
		else
			return 1
		fi
	elif flag_exists "--open"; then
		if [[ $1 == *"- [ ]"* ]] || line_is_sublist "$1"; then
			return 0
		else
			return 1
		fi
	elif line_is_todo "$1" || line_is_sublist "$1"; then
		return 0
	else
		return 1
	fi
}

function show()
{
	if [ -z "${a[1]}" ]; then
		error "Filename must be specified"
	fi

	confirm_file_exists

	while read line; do

		if flag_exists "-s"; then

            if line_is_matching_sublist "$line"; then
		        start=1
		    fi

		     if [[ $start -eq 1 ]] && ! line_is_nonmatching_sublist "$line" && should_be_shown "$line"; then
		        echo $line
		    fi

            if [[ $start -eq 1 ]] && line_is_nonmatching_sublist "$line"; then
                break
            fi
        else
            if should_be_shown "$line"; then
                echo "$line"
            fi
		fi
	done < "$filename"
}


function line_is_nonmatching_sublist()
{
    if line_is_sublist "$1" && ! line_is_matching_sublist "$1"; then
        return 0
    fi

    return 1
}

function line_is_matching_sublist()
{
    if [[ "$1" == *"### $flag_value"* ]]; then
        return 0
    fi

    return 1
}

function line_is_todo()
{
    if line_is_unfinished_todo "$1" || line_is_finished_todo "$1"; then
        return 0
    fi

    return 1
}

function line_is_unfinished_todo()
{
    if [[ "$1" == *"- [ ]"* ]]; then
        return 0
    fi

    return 1
}

function line_is_finished_todo()
{
    if [[ "$1" == *"- [x]"* ]]; then
        return 0
    fi

    return 1
}
function line_is_sublist()
{
    if [[ "$1" == *"### "* ]]; then
        return 0
    fi
    return 1

}

function search()
{

    if   ! flag_exists "-a" && ! flag_exists "--all" ; then
        confirm_file_exists
    fi

    if [ -z "${a[1]}" ]; then
		error "Search Term must be specified"
    fi

    output_file=""
    search_output=""

    if flag_exists "-a" || flag_exists "--all"; then
        searchterm=${a[1]}
        for file in `ls .`; do
            if [[ -f $file ]] && [ ${file: -3} == ".md" ]; then
                searchfile $file "$searchterm"
            fi
        done
    else
        searchterm=${a[2]}
        searchfile "$filename" "$searchterm"
    fi

    if [[ $search_output != "" ]]; then
     echo "$search_output"
    else
        error "Search term '$searchterm' not found"
    fi

}

function searchfile()
{
    while read line; do
        if ! line_is_sublist $line; then
            if line_is_todo "$line" && [[ "$line" == *"$2"* ]]; then
                if  [[ $output_file != $file ]] ; then
                    search_output+="$1
"
                fi
                output_file=$1
                search_output+="$line
"
            fi
        fi
	done < "$1"
}
function write()
{
	if ! flag_exists "-h" && ! flag_exists "--hold"; then
		publish
	fi
}

function publish()
{
    commit_message=$(<"${TMPFILE}")
    rm ${TMPFILE}
    response=$(git pull origin master)
    response=$(git add --all && git commit -m "${commit_message}" && git push origin master)
    exit
}

# Check to see if the file containing your todo list exists and exits the script
# with an error if it does not. As such, it is not suitable for use any time the
# file existing is not a fatal error.
function confirm_file_exists()
{
  if [[ ! file_exists ]]; then
    error "Requested list ${a[1]} doesn't exist"
  fi
}

function read_content()
{
    if [[ ${a[0]} != "publish" ]]; then
        if [[ -z ${a[1]} ]]; then
            help
        else
            if ! flag_exists "-a" && ! flag_exists "--all"; then
                if [[ ${a[1]} != *".md" ]]; then
                    filename=${a[1]}.md
                else
                    filename=${a[1]}
                fi

                if [[ file_exists ]]; then
                    content=$(< $filename )
                else
                    error "File $filename does not exist"
                fi
            fi
        fi
    fi
}

function file_exists()
{
    if [[ -a "$filename" ]]; then
        return 0
    fi

    return 1

}
function help()
{
    echo $"Usage: $0 <create|todo|publish|search|remove|complete|show|sublist> [--open | --done]"
    echo ""
    echo "Examples:"
    echo "         gitodo create MyFile"
    echo "         gitodo todo MyFile 'Take Over The World'"
    echo "         gitodo show MyFile --open"
    echo "         gitodo complete MyFile 'Take Over The World'"
    echo "         gitodo sublist MyFile 'Sublist Name'"
    echo "         gitodo remove MyFile 'Todo Name Here'"
    echo "         gitodo search MyFile 'Search Term'"
    exit 0

}

a=("$@")
read_content

case $1 in
	create)
		create
		create_sublist_from_flag
		write
		;;
	publish)
		publish
		;;
	todo)
		todo
		write
		;;
	remove)
		remove
		write
		;;
	complete)
		complete
		write
		;;
	sublist)
		sublist
		write
		;;
	show)
		show
		;;
	search)
		search
		;;
	help)
	    help
	    ;;
	*)
		help
esac
