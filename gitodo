#!/bin/sh

TMPFILE=$(mktemp /tmp/gitodo.XXXXXX)
trap 'rm -f $TMPFILE' EXIT

function error()
{
	echo "Error: $1"
	exit
}

function success()
{
	echo $1
	echo "${commit_message}$1" >> ${TMPFILE}
}

create_file()
{
	echo "# $1" >> $1.md
	success "File $1.md created"
}

function create_sublist()
{
		echo "

### $1" >> $2.md
		success "Added ublist $1 in list $2"
}

function find_flag_index()
{
	for i in "${!a[@]}" ; do
		if [ "${a[$i]}" = $1 ]; then
			idx=$(($i+1))
		fi
	done
}

function flag_exists()
{
	for i in "${!a[@]}" ; do
		if [ "${a[$i]}" = $1 ]; then
			return 0
		fi
	done
	return 1
}

function create_sublist_from_flag()
{
	content=$(<"${a[1]}.md")
	if flag_exists "-s"; then
		find_flag_index "-s"
		if [ -z "${a[$idx]}" ]; then
			if ! sublist_exists "General"; then
        		create_sublist "General" $1
        	fi
		else
			if ! sublist_exists "${a[$idx]}"; then
				create_sublist "${a[$idx]}" $1
			fi
		fi
	fi
}

function create()
{
	if [ -z ${a[1]} ]; then
		error "File name must be specified"
	elif [ -a "${a[1]}.md" ]; then
		error "Requested File already exists."
	fi
	file_is_in_gitdir
	create_file ${a[1]}
}

function todo_exists()
{
	if [[ $content == *"$1"* ]]; then
		return 0
	else
		return 1
	fi
}

function add_todo()
{
	content=$(<"${a[1]}.md")
	if todo_exists "$1"; then
		if flag_exists "-f" || flag_exists "--force"; then
			echo "- [ ] $1" >> $2.md
			success "Todo $1 successfully added"
		elif todo_is_complete "${a[2]}"; then
			error "Todo already exists and is already complete. To add it anyway, add the -f Flag"
		else
			error "Todo already exists. To add it anyway, add the -f Flag"
		fi
	else
		echo "- [ ] $1" >> $2.md
		success "Todo $1 successfully added"
	fi
}

function todo()
{
	if [ -z ${a[1]} ] || [ -z "${a[2]}" ]; then
		error "Filename and todo must be specified"
	elif [ -a "${a[1]}.md" ]; then
		create_sublist_from_flag ${a[1]}
		add_todo "${a[2]}" ${a[1]}
	else
		if flag_exists "-f" || flag_exists "--force"; then
			create
			create_sublist_from_flag ${a[1]}
			add_todo "${a[2]}" ${a[1]}
		else
			error "File does not exist. To force file creation, add the -f Flag"
		fi
	fi
}

function todo_is_complete()
{
	if [[ $content == *"[x] $1"* ]]; then
		return 0
	else
		return 1
	fi
}

function complete()
{
  file_exists
	content=$(<"${a[1]}.md")
	if todo_exists "${a[2]}"; then
		if todo_is_complete "${a[2]}"; then
			error "Todo is already complete"
		else
			echo "${content/"- [ ] ${a[2]}"/- [x] ${a[2]} }" > "${a[1]}.md"
			success "${a[2]} marked as complete"
		fi
	else
		error "Todo ${a[2]} does not exist"
	fi
}

function sublist_exists()
{
	if [[ $content == *"### $1"* ]]; then
		return 0
	else
		return 1
	fi
}

function sublist()
{
	if [ -z ${a[1]} ] || [ -z "${a[2]}" ]; then
		error "Filename and sublist must be specified"
	elif [ -a "${a[1]}.md" ]; then
		content=$(<"${a[1]}.md")
		if sublist_exists ${a[2]}; then
			if flag_exists "-f" || flag_exists "--force"; then
				create_sublist "${a[2]}" ${a[1]}
			else
	    		error "Sublist ${a[2]} already exists. If you would like to add it anyway, add the -f flag"
			fi
		else
			create_sublist "${a[2]}" ${a[1]}
		fi
	else
		if flag_exists "-f" || flag_exists "--force"; then
			create
			create_sublist "${a[2]}" ${a[1]}
		else
			error "File does not exist. To force file creation, add the -f Flag"
		fi
	fi
}

function should_be_shown()
{
	if flag_exists "--done"; then
		if [[ $1 == *"- [x]"* ]] || [[ $1 == *"### "* ]]; then
			return 0
		else
			return 1
		fi
	elif flag_exists "--open"; then
		if [[ $1 == *"- [ ]"* ]] || [[ $1 == *"### "* ]]; then
			return 0
		else
			return 1
		fi
	elif [[ $1 == *"- [x]"* ]] || [[ $1 == *"- [ ]"* ]] || [[ $1 == *"### "* ]]; then
		return 0
	else
		return 1
	fi
}

function show()
{
	if [ -z "${a[1]}" ]; then
		error "Filename must be specified"
	fi
	file_exists
	while read line; do
		if should_be_shown "$line"; then
			echo "$line"
		fi
	done < "${a[1]}.md"
}

function write()
{
	if ! flag_exists "-h" && ! flag_exists "--hold"; then
		commit_message=$(<"${TMPFILE}")
		rm ${TMPFILE}
		response=$(git pull origin master)
		response=$(git add --all && git commit -m "$commit_message" && git push origin master)
	fi
}

# This checks that the directory your todo file is in is the same as
# the git repository that you are currently working in. It does *not*
# check that the todo file actually exists, that is handled by file_exists()
function file_is_in_gitdir()
{
  file_name=$(readlink -f "${a[1]}.md")
  directory=$(dirname "$file_name")
  git_repo=$(git rev-parse --show-toplevel)
  if [[ ! $directory =~ $git_repo ]]; then
    error "Todo file must be located within the current git repo: ${git_repo}"
  fi
}

# Check to see if the file containing your todo list exists and exits the script
# with an error if it does not. As such, it is not suitable for use any time the
# file existing is not a fatal error.
function file_exists()
{
  if [[ ! -a ${a[1]}.md ]]; then
    error "Requested list ${a[1]} doesn't exist"
  fi
  file_is_in_gitdir # We should also check this whenever we're looking to see if
                    # the file exists, though not vice-versa
}

a=("$@")
case $1 in
	create)
		create
		create_sublist_from_flag
		write
		;;
	todo)
		todo
		write
		;;
	complete)
		complete
		write
		;;
	sublist)
		sublist
		write
		;;
	show)
		show
		;;
	*)
		echo $"Usage: $0 {create|add|complete|show|todo}"
		exit 0
esac